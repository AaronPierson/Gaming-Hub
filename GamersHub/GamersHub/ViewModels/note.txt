I command implemation idea

        public ICommand LoadCommand { get; }
        public ICommand GetNext { get; }
        public ICommand GetPrevious { get; }
        public RAWGViewModel()
        {
         //   LoadCommand = new Command<ObservableCollection<RAWGQTSearch.Result>>(GetAllGamesAsync);
        }

           public event PropertyChangedEventHandler PropertyChanged;
        Property change events

        
        string name = string.Empty;
        string urlImg = string.Empty;
        public string Name
        {
            get => name;
            set
            {
                if (name == value)
                    return;

                name = value;
                OnPropertyChanged(nameof(name));
                OnPropertyChanged(nameof(Display));
            }
        }


            public string Display => $"Searched For: {Name}";

        void OnPropertyChanged(string name)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }





               //search for the newest games
        public async Task<ObservableCollection<RAWGQT.Result>> GetAllGamesAsync() 
        { 
            string response = await htp.GetStringAsync(AllGamesURL);
            var data = NewReleasedGames.FromJson(response);
            //Check for nulls
            if (data.Next.ToString() == null)
            {
                // do nothing
            }
            else
            {
                NextSearchResult = data.Next.ToString();
            }
            //datalist = data.Results.ToList<RAWGQT.Result>();
            ObservableCollection<RAWGQT.Result> games =
                  new ObservableCollection<RAWGQT.Result>(data.Results.ToList());
            return games;
        }





         else
            {
                string id = GD.Id.ToString();
                lblTitle.Text = GD.Name;
                lblPlaytime.Text = "Playtime: " + GD.Playtime.ToString();
                imgGame.Source = GD.BackgroundImage;
                lblRating.Text = "Rating: " + GD.Rating.ToString();
                lblRatingsCount.Text = "Number of ratings: " + GD.RatingsCount.ToString();
                lblRatingTop.Text = "Top score: " + GD.RatingTop.ToString();
                lblRelease.Text = "Released Date: " + GD.Released.ToString();
                //
                var color = GD.DominantColor.ToString().Remove(0,3);
                //GamesLayout.BackgroundColor = ColorConverters.FromHex(color);
              //  GD.Stores[0].StoreStore.Name
                lstShortScreenshots.ItemsSource = GD.ShortScreenshots;
                lstGenres.ItemsSource = GD.Genres;
                lstPlatform.ItemsSource = GD.Platforms;
                lstStores.ItemsSource = GD.Stores;
            }